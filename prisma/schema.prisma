// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Kelas {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nama            String
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User[]
  Children        Children[]
  AbsensiChildren AbsensiChildren[]

  @@map("kelas")
}

model User {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username        String            @unique
  password        String
  isAdmin         Boolean           @default(false)
  tglLahir        DateTime          @db.Date
  kelas           Kelas?            @relation(fields: [kelasId], references: [id])
  kelasId         String?           @db.Uuid
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  AbsensiMentor   AbsensiMentor[]
  AbsensiChildren AbsensiChildren[]
  Log             Log[]
  Season          Season[]

  @@map("users")
}

model AbsensiMentor {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  isPresent Boolean  @default(false)
  tgl       DateTime @db.Date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("absensi_mentor")
}

model Children {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nama            String
  gender          Gender            @default(BOY)
  tglLahir        DateTime?         @db.Date
  namaParent      String?
  kontak          String?
  isJemaat        Boolean           @default(false)
  kelas           Kelas             @relation(fields: [kelasId], references: [id])
  kelasId         String            @db.Uuid
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  AbsensiChildren AbsensiChildren[]

  @@map("children")
}

model AbsensiChildren {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  children   Children @relation(fields: [childrenId], references: [id])
  childrenId String   @db.Uuid
  kelas      Kelas    @relation(fields: [kelasId], references: [id])
  kelasId    String   @db.Uuid
  tgl        DateTime @db.Date
  isPresent  Boolean  @default(false)
  isDevotion Boolean  @default(false)
  extras     Int      @default(0)
  notes      String?
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("absensi_children")
}

model Log {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  action    String
  module    String
  notes     String
  type      LogType  @default(SUCCESS)
  tgl       DateTime @db.Date
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("logs")
}

model Season {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tgl       DateTime @db.Date
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("season")
}

enum LogType {
  SUCCESS
  ERROR
}

enum Gender {
  BOY
  GIRL
}
